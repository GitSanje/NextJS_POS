// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//https://medium.com/@kirudang/relational-database-architecture-inventory-control-system-for-e-commerce-7b678ce14398
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Optional, for long-lived sessions
  access_token      String? // Optional, used for making API requests
  expires_at        Int? // Unix timestamp, for when the access token expires
  token_type        String? // e.g., "Bearer"
  scope             String? // Scope of the access token
  id_token          String? // ID token returned by the provider (e.g., Google)
  session_state     String? // Optional, used by some providers for session tracking
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  dob           DateTime?
  gender        String?

  role UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts          Account[]
  // sessions Session[]
  orders            Order[]
  Cart              Cart[]
  UserPaymentMethod UserPaymentMethod[]
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// enum ProductStatus {
//   AVAILABLE
//   NOTAVAILABLE
// }

//product.media?.items
// product.media?.mainMedia?.image?.url
// product options
// additionalInfosection => title === "shortDesc", , description, 
model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  image           String?
  costPrice       Float
  quantityInStock Int
  validity        String?
  discount        String?
  salePrice       Float?
  margin          String?
  status          Boolean  @default(true)
  isFeatured      Boolean? @default(false)
  slug            String?
  taxId           String? // Optional: product-specific tax
  tax             Tax?     @relation(fields: [taxId], references: [id])

  inventory Inventory?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  suppliers      Supplier[]
  orders         Order[]          @relation("ProductOrders")
  carts          Cart[]
  ProductVariant ProductVariant[]
}

enum CartStatus {
  PENDING
  CHECKOUT
}

model Cart {
  id String @id @default(cuid())

  quantity Int
  status   CartStatus @default(PENDING)

  amount    Float?
  productId String
  product   Product @relation(fields: [productId], references: [id])

  userId String? // User ID for authenticated users
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id], name: "OrderCarts")

  variants ProductVariant[]
}

model ProductVariant {
  id        String         @id @default(uuid())
  var_id    String
  variant   Variant        @relation(fields: [var_id], references: [id])
  var_opt   String?
  option    VariantOption? @relation(fields: [var_opt], references: [id])
  productId String
  Product   Product        @relation(fields: [productId], references: [id])

  var_img         String?
  salePrice       Float
  stock           Int?
  status          Boolean @default(true)
  priceDifference Float?
  costPrice       Float?
  discount        String?

  carts Cart[]
}

model Variant {
  id   String @id @default(uuid())
  name String //eg: size, color

  status         Boolean          @default(true)
  options        VariantOption[]
  ProductVariant ProductVariant[]
}

model VariantOption {
  id             String           @id @default(uuid())
  value          String
  var_id         String
  variant        Variant          @relation(fields: [var_id], references: [id])
  variantName    String?
  ProductVariant ProductVariant[]
}

model Category {
  id           String  @id @default(cuid())
  categoryName String
  description  String?

  products Product[]
}

// model SubCategory {
//   id          String  @id @default(cuid())
//   subName     String
//   description String?

//   categoryId String
//   category   Category @relation(fields: [categoryId], references: [id])
// }

model Inventory {
  id          String    @id @default(cuid())
  status      Boolean   @default(true)
  quantity    Int
  restockDate DateTime?
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
}

model Supplier {
  id           String  @id @default(cuid())
  supplierName String
  email        String?
  phone        String?
  address      String?

  products Product[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id            String       @id @default(cuid())
  orderDate     DateTime     @default(now())
  quantity      Int
  deliveryDate  DateTime?
  amount        Float?
  streetAddress String
  state         String
  city          String
  status        OrderStatus  @default(PENDING)
  paymentStatus Boolean      @default(false)
  paymentId     String?
  paymentType   PaymentType? @relation(fields: [paymentId], references: [id])

  products Product[] @relation("ProductOrders")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  SalesInvoice SalesInvoice[]

  carts Cart[] @relation("OrderCarts")
}

model PaymentType {
  id          String @id @default(cuid())
  paymentType String

  UserPaymentMethod UserPaymentMethod[]
  Order             Order[]
}

model UserPaymentMethod {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  typeId         String
  type           PaymentType @relation(fields: [typeId], references: [id])
  provider       String?
  account_number String?
  expiry_date    DateTime?
  is_default     Boolean     @default(true)
}

model SalesInvoice {
  id          String   @id @default(cuid())
  invoiceDate DateTime @default(now())
  taxId       String?
  tax         Tax?     @relation(fields: [taxId], references: [id])
  totalAmount Float?
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
}

model Tax {
  id          String  @id @default(cuid())
  name        String
  rate        Float
  description String?

  SalesInvoice SalesInvoice[]
  Product      Product[]
}
