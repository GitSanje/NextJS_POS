// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Optional, for long-lived sessions
  access_token      String? // Optional, used for making API requests
  expires_at        Int? // Unix timestamp, for when the access token expires
  token_type        String? // e.g., "Bearer"
  scope             String? // Scope of the access token
  id_token          String? // ID token returned by the provider (e.g., Google)
  session_state     String? // Optional, used by some providers for session tracking
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  dob           DateTime?
  gender        String?

  role UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  // sessions Session[]
  orders   Order[]
  Cart     Cart[]
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

enum ProductStatus {
  AVAILABLE
  NOTAVAILABLE
}

model Product {
  id              String  @id @default(cuid())
  name            String
  description     String?
  image           String?
  costPrice       Float
  quantityInStock Int
  validity        String?
  discount        String?
  salePrice       Float?
  margin          String?
  status          ProductStatus @default(AVAILABLE)

  inventory Inventory?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  suppliers Supplier[] @relation("ProductSuppliers")
  orders    Order[]    @relation("ProductOrders")
  carts     Cart[]
  Variants  Variant[]
}

enum CartStatus {
  PENDING
  CHECKOUT
}

model Cart {
  id String @id @default(cuid())

  quantity Int
  status   CartStatus @default(PENDING)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  variantId String?
  variant   Variant? @relation(fields: [variantId], references: [id])

  userId String? // User ID for authenticated users
  user   User?   @relation(fields: [userId], references: [id])

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id], name: "OrderCarts")
}

model Variant {
  id              String  @id @default(uuid())
  name            String
  salePrice       Float
  priceDifference Float?
  status          String?
  costPrice       Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  carts Cart[]

  // orders Order[] @relation("OrderVariants")
}

model Category {
  id           String  @id @default(cuid())
  categoryName String
  description  String?

  products Product[]
}

model Inventory {
  id          String   @id @default(cuid())
  status      String
  quantity    Int
  restockDate DateTime
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
}

model Supplier {
  id           String  @id @default(cuid())
  supplierName String
  email        String?
  phone        String?

  products Product[] @relation("ProductSuppliers")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id            String      @id @default(cuid())
  orderDate     DateTime    @default(now())
  quantity      Int
  deliveryDate  DateTime?
  streetAddress String
  state         String
  city          String
  status        OrderStatus @default(PENDING)

  products Product[] @relation("ProductOrders") 

  // variants Variant[] @relation("OrderVariants")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String

  SalesInvoice SalesInvoice[]

  carts Cart[] @relation("OrderCarts")
}

model PaymentMethod {
  id          String @id @default(cuid())
  paymentType String // e.g., 'Cash', 'Credit Card'

  orders Order[]
}

model SalesInvoice {
  id          String   @id @default(cuid())
  invoiceDate DateTime // e.g., 'Cash', 'Credit Card'

  totalAmount Float
  order       Order  @relation(fields: [orderId], references: [id])
  orderId     String
}
